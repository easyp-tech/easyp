// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "github.com/easyp-tech/easyp/internal/core/models"
	mock "github.com/stretchr/testify/mock"
)

// LockFile is an autogenerated mock type for the LockFile type
type LockFile struct {
	mock.Mock
}

type LockFile_Expecter struct {
	mock *mock.Mock
}

func (_m *LockFile) EXPECT() *LockFile_Expecter {
	return &LockFile_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: moduleName
func (_m *LockFile) Read(moduleName string) (models.LockFileInfo, error) {
	ret := _m.Called(moduleName)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.LockFileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.LockFileInfo, error)); ok {
		return rf(moduleName)
	}
	if rf, ok := ret.Get(0).(func(string) models.LockFileInfo); ok {
		r0 = rf(moduleName)
	} else {
		r0 = ret.Get(0).(models.LockFileInfo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(moduleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockFile_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type LockFile_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - moduleName string
func (_e *LockFile_Expecter) Read(moduleName interface{}) *LockFile_Read_Call {
	return &LockFile_Read_Call{Call: _e.mock.On("Read", moduleName)}
}

func (_c *LockFile_Read_Call) Run(run func(moduleName string)) *LockFile_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LockFile_Read_Call) Return(_a0 models.LockFileInfo, _a1 error) *LockFile_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LockFile_Read_Call) RunAndReturn(run func(string) (models.LockFileInfo, error)) *LockFile_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewLockFile creates a new instance of LockFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLockFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *LockFile {
	mock := &LockFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
