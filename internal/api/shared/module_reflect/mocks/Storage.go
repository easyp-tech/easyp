// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "github.com/easyp-tech/easyp/internal/mod/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// GetInstallDir provides a mock function with given fields: moduleName, revisionVersion
func (_m *Storage) GetInstallDir(moduleName string, revisionVersion string) string {
	ret := _m.Called(moduleName, revisionVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(moduleName, revisionVersion)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Storage_GetInstallDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstallDir'
type Storage_GetInstallDir_Call struct {
	*mock.Call
}

// GetInstallDir is a helper method to define mock.On call
//   - moduleName string
//   - revisionVersion string
func (_e *Storage_Expecter) GetInstallDir(moduleName interface{}, revisionVersion interface{}) *Storage_GetInstallDir_Call {
	return &Storage_GetInstallDir_Call{Call: _e.mock.On("GetInstallDir", moduleName, revisionVersion)}
}

func (_c *Storage_GetInstallDir_Call) Run(run func(moduleName string, revisionVersion string)) *Storage_GetInstallDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetInstallDir_Call) Return(_a0 string) *Storage_GetInstallDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_GetInstallDir_Call) RunAndReturn(run func(string, string) string) *Storage_GetInstallDir_Call {
	_c.Call.Return(run)
	return _c
}

// IsModuleInstalled provides a mock function with given fields: module
func (_m *Storage) IsModuleInstalled(module models.Module) (bool, error) {
	ret := _m.Called(module)

	if len(ret) == 0 {
		panic("no return value specified for IsModuleInstalled")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Module) (bool, error)); ok {
		return rf(module)
	}
	if rf, ok := ret.Get(0).(func(models.Module) bool); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(models.Module) error); ok {
		r1 = rf(module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_IsModuleInstalled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModuleInstalled'
type Storage_IsModuleInstalled_Call struct {
	*mock.Call
}

// IsModuleInstalled is a helper method to define mock.On call
//   - module models.Module
func (_e *Storage_Expecter) IsModuleInstalled(module interface{}) *Storage_IsModuleInstalled_Call {
	return &Storage_IsModuleInstalled_Call{Call: _e.mock.On("IsModuleInstalled", module)}
}

func (_c *Storage_IsModuleInstalled_Call) Run(run func(module models.Module)) *Storage_IsModuleInstalled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Module))
	})
	return _c
}

func (_c *Storage_IsModuleInstalled_Call) Return(_a0 bool, _a1 error) *Storage_IsModuleInstalled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_IsModuleInstalled_Call) RunAndReturn(run func(models.Module) (bool, error)) *Storage_IsModuleInstalled_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
