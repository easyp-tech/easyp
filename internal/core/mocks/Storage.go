// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "github.com/easyp-tech/easyp/internal/core/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// CreateCacheDownloadDir provides a mock function with given fields: _a0
func (_m *Storage) CreateCacheDownloadDir(_a0 models.CacheDownloadPaths) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateCacheDownloadDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.CacheDownloadPaths) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_CreateCacheDownloadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCacheDownloadDir'
type Storage_CreateCacheDownloadDir_Call struct {
	*mock.Call
}

// CreateCacheDownloadDir is a helper method to define mock.On call
//   - _a0 models.CacheDownloadPaths
func (_e *Storage_Expecter) CreateCacheDownloadDir(_a0 interface{}) *Storage_CreateCacheDownloadDir_Call {
	return &Storage_CreateCacheDownloadDir_Call{Call: _e.mock.On("CreateCacheDownloadDir", _a0)}
}

func (_c *Storage_CreateCacheDownloadDir_Call) Run(run func(_a0 models.CacheDownloadPaths)) *Storage_CreateCacheDownloadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.CacheDownloadPaths))
	})
	return _c
}

func (_c *Storage_CreateCacheDownloadDir_Call) Return(_a0 error) *Storage_CreateCacheDownloadDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_CreateCacheDownloadDir_Call) RunAndReturn(run func(models.CacheDownloadPaths) error) *Storage_CreateCacheDownloadDir_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCacheRepositoryDir provides a mock function with given fields: name
func (_m *Storage) CreateCacheRepositoryDir(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CreateCacheRepositoryDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_CreateCacheRepositoryDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCacheRepositoryDir'
type Storage_CreateCacheRepositoryDir_Call struct {
	*mock.Call
}

// CreateCacheRepositoryDir is a helper method to define mock.On call
//   - name string
func (_e *Storage_Expecter) CreateCacheRepositoryDir(name interface{}) *Storage_CreateCacheRepositoryDir_Call {
	return &Storage_CreateCacheRepositoryDir_Call{Call: _e.mock.On("CreateCacheRepositoryDir", name)}
}

func (_c *Storage_CreateCacheRepositoryDir_Call) Run(run func(name string)) *Storage_CreateCacheRepositoryDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storage_CreateCacheRepositoryDir_Call) Return(_a0 string, _a1 error) *Storage_CreateCacheRepositoryDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_CreateCacheRepositoryDir_Call) RunAndReturn(run func(string) (string, error)) *Storage_CreateCacheRepositoryDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetCacheDownloadPaths provides a mock function with given fields: module, revision
func (_m *Storage) GetCacheDownloadPaths(module models.Module, revision models.Revision) models.CacheDownloadPaths {
	ret := _m.Called(module, revision)

	if len(ret) == 0 {
		panic("no return value specified for GetCacheDownloadPaths")
	}

	var r0 models.CacheDownloadPaths
	if rf, ok := ret.Get(0).(func(models.Module, models.Revision) models.CacheDownloadPaths); ok {
		r0 = rf(module, revision)
	} else {
		r0 = ret.Get(0).(models.CacheDownloadPaths)
	}

	return r0
}

// Storage_GetCacheDownloadPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCacheDownloadPaths'
type Storage_GetCacheDownloadPaths_Call struct {
	*mock.Call
}

// GetCacheDownloadPaths is a helper method to define mock.On call
//   - module models.Module
//   - revision models.Revision
func (_e *Storage_Expecter) GetCacheDownloadPaths(module interface{}, revision interface{}) *Storage_GetCacheDownloadPaths_Call {
	return &Storage_GetCacheDownloadPaths_Call{Call: _e.mock.On("GetCacheDownloadPaths", module, revision)}
}

func (_c *Storage_GetCacheDownloadPaths_Call) Run(run func(module models.Module, revision models.Revision)) *Storage_GetCacheDownloadPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Module), args[1].(models.Revision))
	})
	return _c
}

func (_c *Storage_GetCacheDownloadPaths_Call) Return(_a0 models.CacheDownloadPaths) *Storage_GetCacheDownloadPaths_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_GetCacheDownloadPaths_Call) RunAndReturn(run func(models.Module, models.Revision) models.CacheDownloadPaths) *Storage_GetCacheDownloadPaths_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstallDir provides a mock function with given fields: moduleName, revisionVersion
func (_m *Storage) GetInstallDir(moduleName string, revisionVersion string) string {
	ret := _m.Called(moduleName, revisionVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(moduleName, revisionVersion)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Storage_GetInstallDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstallDir'
type Storage_GetInstallDir_Call struct {
	*mock.Call
}

// GetInstallDir is a helper method to define mock.On call
//   - moduleName string
//   - revisionVersion string
func (_e *Storage_Expecter) GetInstallDir(moduleName interface{}, revisionVersion interface{}) *Storage_GetInstallDir_Call {
	return &Storage_GetInstallDir_Call{Call: _e.mock.On("GetInstallDir", moduleName, revisionVersion)}
}

func (_c *Storage_GetInstallDir_Call) Run(run func(moduleName string, revisionVersion string)) *Storage_GetInstallDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetInstallDir_Call) Return(_a0 string) *Storage_GetInstallDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_GetInstallDir_Call) RunAndReturn(run func(string, string) string) *Storage_GetInstallDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstalledModuleHash provides a mock function with given fields: moduleName, revisionVersion
func (_m *Storage) GetInstalledModuleHash(moduleName string, revisionVersion string) (models.ModuleHash, error) {
	ret := _m.Called(moduleName, revisionVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetInstalledModuleHash")
	}

	var r0 models.ModuleHash
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.ModuleHash, error)); ok {
		return rf(moduleName, revisionVersion)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.ModuleHash); ok {
		r0 = rf(moduleName, revisionVersion)
	} else {
		r0 = ret.Get(0).(models.ModuleHash)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(moduleName, revisionVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetInstalledModuleHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstalledModuleHash'
type Storage_GetInstalledModuleHash_Call struct {
	*mock.Call
}

// GetInstalledModuleHash is a helper method to define mock.On call
//   - moduleName string
//   - revisionVersion string
func (_e *Storage_Expecter) GetInstalledModuleHash(moduleName interface{}, revisionVersion interface{}) *Storage_GetInstalledModuleHash_Call {
	return &Storage_GetInstalledModuleHash_Call{Call: _e.mock.On("GetInstalledModuleHash", moduleName, revisionVersion)}
}

func (_c *Storage_GetInstalledModuleHash_Call) Run(run func(moduleName string, revisionVersion string)) *Storage_GetInstalledModuleHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetInstalledModuleHash_Call) Return(_a0 models.ModuleHash, _a1 error) *Storage_GetInstalledModuleHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetInstalledModuleHash_Call) RunAndReturn(run func(string, string) (models.ModuleHash, error)) *Storage_GetInstalledModuleHash_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function with given fields: cacheDownloadPaths, module, revision, moduleConfig
func (_m *Storage) Install(cacheDownloadPaths models.CacheDownloadPaths, module models.Module, revision models.Revision, moduleConfig models.ModuleConfig) (models.ModuleHash, error) {
	ret := _m.Called(cacheDownloadPaths, module, revision, moduleConfig)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 models.ModuleHash
	var r1 error
	if rf, ok := ret.Get(0).(func(models.CacheDownloadPaths, models.Module, models.Revision, models.ModuleConfig) (models.ModuleHash, error)); ok {
		return rf(cacheDownloadPaths, module, revision, moduleConfig)
	}
	if rf, ok := ret.Get(0).(func(models.CacheDownloadPaths, models.Module, models.Revision, models.ModuleConfig) models.ModuleHash); ok {
		r0 = rf(cacheDownloadPaths, module, revision, moduleConfig)
	} else {
		r0 = ret.Get(0).(models.ModuleHash)
	}

	if rf, ok := ret.Get(1).(func(models.CacheDownloadPaths, models.Module, models.Revision, models.ModuleConfig) error); ok {
		r1 = rf(cacheDownloadPaths, module, revision, moduleConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type Storage_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - cacheDownloadPaths models.CacheDownloadPaths
//   - module models.Module
//   - revision models.Revision
//   - moduleConfig models.ModuleConfig
func (_e *Storage_Expecter) Install(cacheDownloadPaths interface{}, module interface{}, revision interface{}, moduleConfig interface{}) *Storage_Install_Call {
	return &Storage_Install_Call{Call: _e.mock.On("Install", cacheDownloadPaths, module, revision, moduleConfig)}
}

func (_c *Storage_Install_Call) Run(run func(cacheDownloadPaths models.CacheDownloadPaths, module models.Module, revision models.Revision, moduleConfig models.ModuleConfig)) *Storage_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.CacheDownloadPaths), args[1].(models.Module), args[2].(models.Revision), args[3].(models.ModuleConfig))
	})
	return _c
}

func (_c *Storage_Install_Call) Return(_a0 models.ModuleHash, _a1 error) *Storage_Install_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_Install_Call) RunAndReturn(run func(models.CacheDownloadPaths, models.Module, models.Revision, models.ModuleConfig) (models.ModuleHash, error)) *Storage_Install_Call {
	_c.Call.Return(run)
	return _c
}

// IsModuleInstalled provides a mock function with given fields: module
func (_m *Storage) IsModuleInstalled(module models.Module) (bool, error) {
	ret := _m.Called(module)

	if len(ret) == 0 {
		panic("no return value specified for IsModuleInstalled")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Module) (bool, error)); ok {
		return rf(module)
	}
	if rf, ok := ret.Get(0).(func(models.Module) bool); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(models.Module) error); ok {
		r1 = rf(module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_IsModuleInstalled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModuleInstalled'
type Storage_IsModuleInstalled_Call struct {
	*mock.Call
}

// IsModuleInstalled is a helper method to define mock.On call
//   - module models.Module
func (_e *Storage_Expecter) IsModuleInstalled(module interface{}) *Storage_IsModuleInstalled_Call {
	return &Storage_IsModuleInstalled_Call{Call: _e.mock.On("IsModuleInstalled", module)}
}

func (_c *Storage_IsModuleInstalled_Call) Run(run func(module models.Module)) *Storage_IsModuleInstalled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Module))
	})
	return _c
}

func (_c *Storage_IsModuleInstalled_Call) Return(_a0 bool, _a1 error) *Storage_IsModuleInstalled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_IsModuleInstalled_Call) RunAndReturn(run func(models.Module) (bool, error)) *Storage_IsModuleInstalled_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
