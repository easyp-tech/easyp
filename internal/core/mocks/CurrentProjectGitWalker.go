// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	core "github.com/easyp-tech/easyp/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// CurrentProjectGitWalker is an autogenerated mock type for the CurrentProjectGitWalker type
type CurrentProjectGitWalker struct {
	mock.Mock
}

type CurrentProjectGitWalker_Expecter struct {
	mock *mock.Mock
}

func (_m *CurrentProjectGitWalker) EXPECT() *CurrentProjectGitWalker_Expecter {
	return &CurrentProjectGitWalker_Expecter{mock: &_m.Mock}
}

// GetDirWalker provides a mock function with given fields: workingDir, gitRef, path
func (_m *CurrentProjectGitWalker) GetDirWalker(workingDir string, gitRef string, path string) (core.DirWalker, error) {
	ret := _m.Called(workingDir, gitRef, path)

	if len(ret) == 0 {
		panic("no return value specified for GetDirWalker")
	}

	var r0 core.DirWalker
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (core.DirWalker, error)); ok {
		return rf(workingDir, gitRef, path)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) core.DirWalker); ok {
		r0 = rf(workingDir, gitRef, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DirWalker)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(workingDir, gitRef, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrentProjectGitWalker_GetDirWalker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirWalker'
type CurrentProjectGitWalker_GetDirWalker_Call struct {
	*mock.Call
}

// GetDirWalker is a helper method to define mock.On call
//   - workingDir string
//   - gitRef string
//   - path string
func (_e *CurrentProjectGitWalker_Expecter) GetDirWalker(workingDir interface{}, gitRef interface{}, path interface{}) *CurrentProjectGitWalker_GetDirWalker_Call {
	return &CurrentProjectGitWalker_GetDirWalker_Call{Call: _e.mock.On("GetDirWalker", workingDir, gitRef, path)}
}

func (_c *CurrentProjectGitWalker_GetDirWalker_Call) Run(run func(workingDir string, gitRef string, path string)) *CurrentProjectGitWalker_GetDirWalker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CurrentProjectGitWalker_GetDirWalker_Call) Return(_a0 core.DirWalker, _a1 error) *CurrentProjectGitWalker_GetDirWalker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CurrentProjectGitWalker_GetDirWalker_Call) RunAndReturn(run func(string, string, string) (core.DirWalker, error)) *CurrentProjectGitWalker_GetDirWalker_Call {
	_c.Call.Return(run)
	return _c
}

// NewCurrentProjectGitWalker creates a new instance of CurrentProjectGitWalker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCurrentProjectGitWalker(t interface {
	mock.TestingT
	Cleanup(func())
}) *CurrentProjectGitWalker {
	mock := &CurrentProjectGitWalker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
