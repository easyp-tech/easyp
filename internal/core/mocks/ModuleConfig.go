// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/easyp-tech/easyp/internal/mod/models"

	repository "github.com/easyp-tech/easyp/internal/mod/adapters/repository"
)

// ModuleConfig is an autogenerated mock type for the ModuleConfig type
type ModuleConfig struct {
	mock.Mock
}

type ModuleConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *ModuleConfig) EXPECT() *ModuleConfig_Expecter {
	return &ModuleConfig_Expecter{mock: &_m.Mock}
}

// ReadFromRepo provides a mock function with given fields: ctx, repo, revision
func (_m *ModuleConfig) ReadFromRepo(ctx context.Context, repo repository.Repo, revision models.Revision) (models.ModuleConfig, error) {
	ret := _m.Called(ctx, repo, revision)

	if len(ret) == 0 {
		panic("no return value specified for ReadFromRepo")
	}

	var r0 models.ModuleConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Repo, models.Revision) (models.ModuleConfig, error)); ok {
		return rf(ctx, repo, revision)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Repo, models.Revision) models.ModuleConfig); ok {
		r0 = rf(ctx, repo, revision)
	} else {
		r0 = ret.Get(0).(models.ModuleConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Repo, models.Revision) error); ok {
		r1 = rf(ctx, repo, revision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModuleConfig_ReadFromRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFromRepo'
type ModuleConfig_ReadFromRepo_Call struct {
	*mock.Call
}

// ReadFromRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - repo repository.Repo
//   - revision models.Revision
func (_e *ModuleConfig_Expecter) ReadFromRepo(ctx interface{}, repo interface{}, revision interface{}) *ModuleConfig_ReadFromRepo_Call {
	return &ModuleConfig_ReadFromRepo_Call{Call: _e.mock.On("ReadFromRepo", ctx, repo, revision)}
}

func (_c *ModuleConfig_ReadFromRepo_Call) Run(run func(ctx context.Context, repo repository.Repo, revision models.Revision)) *ModuleConfig_ReadFromRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.Repo), args[2].(models.Revision))
	})
	return _c
}

func (_c *ModuleConfig_ReadFromRepo_Call) Return(_a0 models.ModuleConfig, _a1 error) *ModuleConfig_ReadFromRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ModuleConfig_ReadFromRepo_Call) RunAndReturn(run func(context.Context, repository.Repo, models.Revision) (models.ModuleConfig, error)) *ModuleConfig_ReadFromRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewModuleConfig creates a new instance of ModuleConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModuleConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModuleConfig {
	mock := &ModuleConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
