syntax = "proto3";

import "import_used/messages.proto";
import "import_used/enums.proto";
import "import_used/options.proto";
import "import_used/types.proto";
import "import_used/field.proto";
import "import_used/for_one_of.proto";
import "import_used/thrd_party/messages.proto";
import "import_used/thrd_party/enums.proto";
import "import_used/thrd_party/options.proto";
import "import_used/thrd_party/types.proto";
import "import_used/thrd_party/for_extends.proto";

package import_used;

extend import_used.thrd_party.MethodOptions {
  MethodOption options = 10000;
}

message SomeMessage {
  // use import from the same package
  SomeEnum field_1 = 1;
  MessageAsType field_2 = 2;

  // from 3rd party
  import_used.thrd_party.SomeEnum field_3 = 3;
  import_used.thrd_party.MessageAsType field_4 = 4;

  message Nested {
    SomeField in_nested = 1;

    oneof oneof{
      ForOneOf one_of = 3;
    }
  }
}

service TestService {
  rpc TestRPCSamePackage(MessageRequest) returns(MessageResponse) {
    option (Option) = {};
  }

  rpc TestRPCThrdPartyPackage(import_used.thrd_party.MessageRequest) returns(import_used.thrd_party.MessageResponse) {
    option (import_used.thrd_party.Option) = {};
  }
}
