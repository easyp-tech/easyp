version: '3'

vars:
  LINTER_VERSION: "1.57.2"
  GOTESTSUM_VERSION: "1.11.0"
  HADOLINT_VERSION: "v2.12.1-beta"
  LOCAL_BIN: "{{.USER_WORKING_DIR}}/bin"
  MOCKERY_VERSION: "v2.41.0"

tasks:

  install_linters:
    cmds:
      - "curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b {{.LOCAL_BIN}} v{{.LINTER_VERSION}}"

  install_gotestsum:
    cmds:
      - "GOBIN={{.LOCAL_BIN}} go install gotest.tools/gotestsum@v{{.GOTESTSUM_VERSION}}"

  install_mockery:
    cmds:
      - "GOBIN={{.LOCAL_BIN}} go install github.com/vektra/mockery/v2@{{.MOCKERY_VERSION}}"

  install_hadolint:
    cmds:
      - "docker pull ghcr.io/hadolint/hadolint:{{.HADOLINT_VERSION}}"

  init:
    deps:
      - install_linters
      - install_gotestsum
      - install_mockery
    cmds:
      - "go get -v ./..."

  build:
    cmds:
      - "go build -o easyp ./cmd/easyp"

  test:
    cmds:
      - "{{.LOCAL_BIN}}/gotestsum --format pkgname -- -coverprofile=coverage.out -race -count=1 ./..."

  lint:
    deps:
      - build
    cmds:
      - "docker run --rm -i ghcr.io/hadolint/hadolint:{{.HADOLINT_VERSION}} < Docker/base/Dockerfile"
      - "docker run --rm -i ghcr.io/hadolint/hadolint:{{.HADOLINT_VERSION}} < Docker/lint/Dockerfile"
      - "{{.LOCAL_BIN}}/golangci-lint run ./..."

  quality:
    deps:
      - test
      - lint

  coverage:
    cmds:
      - "go tool cover -html=coverage.out"

  install:
    cmds:
      - "go install ./cmd/easyp"

  clean:
    cmds:
      - "rm -rf ./bin"
      - "rm -rf ./coverage.out"
      - "go clean -cache"

  mock:
    cmds:
      - "{{.LOCAL_BIN}}/mockery --name {{.NAME}} --dir {{.DIR}} --output {{.DIR}}/mocks"

  mocks:
    cmds:
      - task: mock
        vars: { NAME: 'LockFile', DIR: './internal/adapters/storage' }

      - task: mock
        vars: { NAME: 'Rule', DIR: './internal/core' }
      - task: mock
        vars: { NAME: 'Console', DIR: './internal/core' }
      - task: mock
        vars: { NAME: 'CurrentProjectGitWalker', DIR: './internal/core' }
      - task: mock
        vars: { NAME: 'Storage', DIR: './internal/core' }
      - task: mock
        vars: { NAME: 'ModuleConfig', DIR: './internal/core' }
      - task: mock
        vars: { NAME: 'LockFile', DIR: './internal/core' }

  docker_base:
    preconditions:
      - test -f Docker/base/Dockerfile
    cmds:
      - docker build -f Docker/base/Dockerfile -t easyp/base:latest .
      - docker tag easyp/base:latest easyp/base:{{.GIT_TAG}}

  docker_lint:
    preconditions:
      - test -f Docker/lint/Dockerfile
    cmds:
      - docker build -f Docker/lint/Dockerfile --build-arg="EASYP_BASE_VERSION=latest" -t easyp/lint:latest .
      - docker tag easyp/lint:latest easyp/lint:{{.GIT_TAG}}

  docker_push:
    cmds:
      - docker push easyp/base:latest
      - docker push easyp/base:{{.GIT_TAG}}
      - docker push easyp/lint:latest
      - docker push easyp/lint:{{.GIT_TAG}}

  docker:
    vars:
      GIT_TAG:
        sh: "git describe --tags --abbrev=0"
    cmds:
      - task: docker_base
        vars:
          GIT_TAG: "{{.GIT_TAG}}"
      - task: docker_lint
        vars:
          GIT_TAG: "{{.GIT_TAG}}"
      - task: docker_push
        vars:
          GIT_TAG: "{{.GIT_TAG}}"
